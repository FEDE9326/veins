//
// Generated file, do not edit! Created by nedtool 5.0 from veins/base/messages/MacPkt.msg.
//

#ifndef __MACPKT_M_H
#define __MACPKT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/base/utils/SimpleAddress.h"
// }}

/**
 * Class generated from <tt>veins/base/messages/MacPkt.msg:36</tt> by nedtool.
 * <pre>
 * // A basic MAC (Media Access Control) packet format definition
 * // 
 * // subclass if you want to create your own MAC layer packet class
 * //
 * // The basic MAC packet only provides source and destination address
 * //
 * // @author Daniel Willkomm
 * packet MacPkt
 * {
 *     LAddress::L2Type destAddr; // destination mac address
 *     LAddress::L2Type srcAddr;  // source mac address
 *     long sequenceId; // Sequence Number to detect duplicate messages
 * }
 * </pre>
 */
class MacPkt : public ::omnetpp::cPacket
{
  protected:
    LAddress::L2Type destAddr;
    LAddress::L2Type srcAddr;
    long sequenceId;

  private:
    void copy(const MacPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacPkt&);

  public:
    MacPkt(const char *name=nullptr, int kind=0);
    MacPkt(const MacPkt& other);
    virtual ~MacPkt();
    MacPkt& operator=(const MacPkt& other);
    virtual MacPkt *dup() const {return new MacPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual LAddress::L2Type& getDestAddr();
    virtual const LAddress::L2Type& getDestAddr() const {return const_cast<MacPkt*>(this)->getDestAddr();}
    virtual void setDestAddr(const LAddress::L2Type& destAddr);
    virtual LAddress::L2Type& getSrcAddr();
    virtual const LAddress::L2Type& getSrcAddr() const {return const_cast<MacPkt*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const LAddress::L2Type& srcAddr);
    virtual long getSequenceId() const;
    virtual void setSequenceId(long sequenceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MACPKT_M_H

